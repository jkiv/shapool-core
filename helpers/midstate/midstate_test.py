import binascii
import midstate
import pytest
import struct

def test_initial_state():
    SHA256_H0 =  bytes([
        # Byte-swap 32-bit words
        0x6a, 0x09, 0xe6, 0x67,
        0xbb, 0x67, 0xae, 0x85,
        0x3c, 0x6e, 0xf3, 0x72,
        0xa5, 0x4f, 0xf5, 0x3a,
        0x51, 0x0e, 0x52, 0x7f,
        0x9b, 0x05, 0x68, 0x8c,
        0x1f, 0x83, 0xd9, 0xab,
        0x5b, 0xe0, 0xcd, 0x19
    ])

    s = midstate.ShaState()

    assert s.as_bin(True) == SHA256_H0

def test_btc_four_zeroes():
    expected_state = bytes([
        0xdc, 0x6a, 0x3b, 0x8d, 0x0c, 0x69, 0x42, 0x1a,
        0xcb, 0x1a, 0x54, 0x34, 0xe5, 0x36, 0xf7, 0xd5,
        0xc3, 0xc1, 0xb9, 0xe4, 0x4c, 0xbb, 0x9b, 0x8f,
        0x95, 0xf0, 0x17, 0x2e, 0xfc, 0x48, 0xd2, 0xdf,
    ])

    expected_second_block = bytes([
        0xdc, 0x14, 0x17, 0x87,
        0x35, 0x8b, 0x05, 0x53,
        0x53, 0x5f, 0x01, 0x19
    ])

    message = struct.pack("<L", 2) + \
              binascii.a2b_hex("000000000000000117c80378b8da0e33559b5997f2ad55e2f7d18ec1975b9717")[::-1] + \
              binascii.a2b_hex("871714dcbae6c8193a2bb9b2a69fe1c0440399f38d94b3a0f1b447275a29978a")[::-1] + \
              struct.pack("<LL", 0x53058b35, 0x19015f53)

    assert message[64:] == expected_second_block

    s = midstate.ShaState()

    s.update(message[:64])

    assert s.as_bin(True) == expected_state